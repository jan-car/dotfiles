## WSL ###

wsl-notify-send() {
  MESSAGE=$1
  printf "${HL}Sending notification '${MESSAGE}' to Windows${NC}\n"
  "${HOME}/winhome/.wsl/wsl-notify-send/wsl-notify-send.exe" --category "$WSL_DISTRO_NAME" $1
}

# Use Ctrl+o to copy current terminal line to clipboard:
copybuffer () {
  if builtin which clip.exe &>/dev/null; then
    printf "%s" "$BUFFER" | clip.exe
  else
    zle -M "clip.exe not found. Please make sure Windows executables are in the path."
  fi
}
zle -N copybuffer
bindkey -M emacs "^O" copybuffer
bindkey -M viins "^O" copybuffer
bindkey -M vicmd "^O" copybuffer



### SYSTEM ###

alias path='echo -e ${PATH//:/\\n}'

alias mkdir='mkdir -pv'

alias list-manually-installed-packages='
comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n "s/^Package: //p" | sort -u)
'
# nala history --installed

system-update() {
  printf "\n${HL}nala (apt):${NC}\n"
  sudo nala upgrade -y
  printf "\n${HL}snap:${NC}\n"
  sudo snap refresh
  printf "\n${HL}mise:${NC}\n"
  mise upgrade
  mise sync python --uv
  printf "\n${HL}uv:${NC}\n"
  uv tool upgrade --all
  printf "\n${HL}tldr:${NC}\n"
  tldr --update
}

alias ncdu='ncdu --color dark -e'
alias ncdu-all='ncdu / --color dark -e --exclude /mnt/c'



### FILES ###

alias open-files='xdg-open .'

alias ls='eza --all --icons --group-directories-first --sort type --across'
alias ll='eza --all --icons --group-directories-first --sort type --long --header'
lt() {
  eza --all --icons --group-directories-first --long --header --tree --level=${1:-2}
}

alias fsizes='du -ah . | sort -hr | head -n 10'



### FIND ###

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias bat='batcat'

alias top='bashtop'



### GIT ###

# "export HUB_VERBOSE=1" before execution to get more output!
alias repo-sync='
pushd -q ${REPO_DIR}
for repo in `find -maxdepth 5 -type d -name .git`; do
  (echo -e "${HL}Refreshing $repo:h${NC}"; cd $repo:h; hub sync; git fetch --tags --force)
done
popd -q
'

alias repo-sync-gc='
pushd -q ${REPO_DIR}
for repo in `find -maxdepth 5 -type d -name .git`; do
  (echo -e "${HL}Refreshing and cleaning up $repo:h${NC}"; cd $repo:h; hub sync; git fetch --tags --force; git gc --aggressive --prune=now)
done
popd -q
'

# checkout master before using the following:
alias git-tag-update='git fetch origin --tags --force'
alias git-list-merged-branches='git branch --merged master --no-color | grep -Ev "master|stable|main"'
alias git-delete-merged-branches='git branch --merged master --no-color | grep -Ev "master|stable|main" | xargs git branch -d'

search-repos() {
  for repo in `find ${REPO_DIR} -maxdepth 6 -type d -name .git`; do
    (echo -e "${HL}Searching $repo:h${NC}"; cd $repo:h; git log --oneline --all | rg "$1")
  done
}



### DOCKER ###

alias docker-check='
docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Size}}\t{{.RunningFor}}\t{{.Status}}" | docker-color-output
'
alias docker-check-slim='
docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}" | docker-color-output
'
alias docker-monitor='
watch --color "docker ps --format \"table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Size}}\t{{.RunningFor}}\t{{.Status}}\" | docker-color-output"
'
alias docker-monitor-slim='
watch --color "docker ps --format \"table {{.ID}}\t{{.Names}}\t{{.Status}}\" | docker-color-output"
'
alias docker-kill-all='
docker stop $(docker ps -a -q)
'
alias docker-system-size='
docker system df
'



### KUBECTL ###

alias kubectl='kubecolor'

alias k-monitor-pods='watch -c "kubecolor get pods --force-colors"'


### SSH ###

alias ssh-clear='keychain --clear'

ssh-load() {
  ssh_folder="$HOME/.ssh"
  # Argument is not provided, offer fuzzy find using fzf
  echo "No argument provided. Please select a file from the '$ssh_folder' folder:"
  selected_file=$(find "$ssh_folder" -type f -name '*id_rsa*' ! -name '*.pub' | fzf)
  if [[ -n "$selected_file" ]]; then
      echo "Selected file: $selected_file"
      eval `keychain --eval --agents ssh $selected_file`
  else
      echo "No file selected. Exiting."
      return  # Exit the function without stopping the whole shell
  fi
}

ssh-load-all() {
  ssh_folder="$HOME/.ssh"
  filenames=$(find "$ssh_folder" -type f -name '*id_rsa*' ! -name '*.pub')
  eval `keychain --eval --agents ssh $filenames`
}



### PYTHON ###

venv-init() {
  # Check if virtualenv folder already exists:
  if [ -d ".venv" ]; then
    printf "${SC_RED}Error: '.venv' folder already exists. Please remove it or use a different directory.${NC}\n"
    echo ""
    return 1
  fi
  # Get Python version from the argument or use global version:
  version=${1:-$(mise current python | tr -d '\n')}
  if [ -z "$version" ]; then
    printf "${SC_RED}No Python version specified and no global version found. Please specify a version!${NC}"
    echo ""
    return 1
  fi
  # Check if specified Python version is installed:
  if ! mise list python | grep -q "$version"; then
    printf "${SC_YELLOW}Python version $version is not installed. Do you want to install it now? (y/n): ${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
      printf "${HL}Installing Python version $version (and syncing it to uv)...${NC}\n"
      mise install python@$version
      mise sync python --uv
    else
      printf "${SC_RED}Installation aborted. Exiting.${NC}\n"
      echo ""
      return 1
    fi
  fi
  # Write .mise.local.toml to configure the virtual environment if it does not yet exist:
  if [ -f ".mise.local.toml" ]; then
    printf "${SC_RED}.mise.local.toml already exists! Please remove or configure it manually!${NC}"
    echo ""
    return 1
  else
    printf "${HL}Generate '.mise.local.toml' file:\n${NC}"
    echo "env_path = [\"./.venv/bin\"]\n\n[tools]\npython = \"$version\"\n\n[env]\n_.python.venv = { path = \".venv\", create = true }\n\n[settings]\npython.uv_venv_auto = true" | tee .mise.local.toml
    mise trust -q
  fi
  # Ignore .venv and .mise.local.toml in .gitignore:
  if ! grep -q ".venv" .gitignore 2>/dev/null; then
    echo ".venv/" >> .gitignore
  fi
  if ! grep -q ".mise.local.toml" .gitignore 2>/dev/null; then
    echo ".mise.local.toml" >> .gitignore
  fi
}

uv-init() {
  # Create a virtual environment using mise (see above):
  venv-init "$@"
  echo "${HL}Initializing uv project...${NC}"
  version=${1:-$(mise current python | tr -d '\n')}
  uv init --python "$version"
}



### INTELLIJ ###

# Hardware acceleration doesn't work: https://github.com/cascadium/wsl-windows-toolbar-launcher/issues/43#issuecomment-1416264763
alias jetbrains-toolbox="LIBGL_ALWAYS_SOFTWARE=1 ${HOME}/.local/share/JetBrains/Toolbox/bin/jetbrains-toolbox"
alias pycharm="LIBGL_ALWAYS_SOFTWARE=1 ${HOME}/.local/share/JetBrains/Toolbox/apps/pycharm-community/bin/pycharm.sh"
alias idea="LIBGL_ALWAYS_SOFTWARE=1 ${HOME}/.local/share/JetBrains/Toolbox/apps/intellij-idea-ultimate/bin/idea.sh"



### DOTFILES ###

alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'



### LOCAL CONFIG ###

if [ -f "$HOME/.zshaliases_local" ]; then
  source "$HOME/.zshaliases_local"
fi
